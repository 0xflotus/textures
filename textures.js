// Generated by CoffeeScript 1.6.3
(function() {
  var rand, root,
    __slice = [].slice;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  rand = function() {
    return (Math.random().toString(36) + "00000000000000000").replace(/[^a-z]+/g, "").slice(0, 5);
  };

  root.textures = {
    circles: function() {
      var background, circles, complement, fill, id, outerFill, outerRadius, outerStroke, outerStrokeWidth, radius, size, stroke, strokeWidth;
      size = 20;
      background = "";
      radius = 1;
      complement = false;
      fill = "#343434";
      stroke = "#343434";
      strokeWidth = 0;
      outerRadius = 0;
      outerFill = "#343434";
      outerStroke = "#343434";
      outerStrokeWidth = 0;
      id = rand();
      circles = function() {
        var corner, g, _i, _j, _len, _len1, _ref, _ref1, _results;
        g = this.append("defs").append("pattern").attr("id", id).attr("patternUnits", "userSpaceOnUse").attr("width", size).attr("height", size);
        if (background) {
          g.append("rect").attr("width", size).attr("height", size).attr("fill", background);
        }
        if (outerRadius) {
          g.append("circle").attr("cx", size / 2).attr("cy", size / 2).attr("r", outerRadius).attr("fill", outerFill).attr("stroke", outerStroke).attr("stroke-width", outerStrokeWidth);
          if (complement) {
            _ref = [[0, 0], [0, size], [size, 0], [size, size]];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              corner = _ref[_i];
              g.append("circle").attr("cx", corner[0]).attr("cy", corner[1]).attr("r", outerRadius).attr("fill", outerFill).attr("stroke", outerStroke).attr("stroke-width", outerStrokeWidth);
            }
          }
        }
        g.append("circle").attr("cx", size / 2).attr("cy", size / 2).attr("r", radius).attr("fill", fill).attr("stroke", stroke).attr("stroke-width", strokeWidth);
        if (complement) {
          _ref1 = [[0, 0], [0, size], [size, 0], [size, size]];
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            corner = _ref1[_j];
            _results.push(g.append("circle").attr("cx", corner[0]).attr("cy", corner[1]).attr("r", radius).attr("fill", fill).attr("stroke", stroke).attr("stroke-width", strokeWidth));
          }
          return _results;
        }
      };
      circles.background = function(_) {
        background = _;
        return circles;
      };
      circles.size = function(_) {
        size = _;
        return circles;
      };
      circles.complement = function() {
        complement = true;
        return circles;
      };
      circles.radius = function(_) {
        radius = _;
        return circles;
      };
      circles.fill = function(_) {
        fill = _;
        return circles;
      };
      circles.stroke = function(_) {
        stroke = _;
        return circles;
      };
      circles.strokeWidth = function(_) {
        strokeWidth = _;
        return circles;
      };
      circles.outerRadius = function(_) {
        outerRadius = _;
        return circles;
      };
      circles.outerFill = function(_) {
        outerFill = _;
        return circles;
      };
      circles.outerStroke = function(_) {
        outerStroke = _;
        return circles;
      };
      circles.outerStrokeWidth = function(_) {
        outerStrokeWidth = _;
        return circles;
      };
      circles.id = function(_) {
        if (!arguments.length) {
          return id;
        } else {
          id = _;
          return circles;
        }
      };
      circles.url = function() {
        return "url(#" + circles.id() + ")";
      };
      return circles;
    },
    lines: function() {
      var background, id, lines, orientation, path, shapeRendering, size, stroke, strokeWidth;
      size = 20;
      strokeWidth = 2;
      stroke = "#343434";
      id = rand();
      background = "";
      orientation = ["diagonal"];
      shapeRendering = "auto";
      path = function(orientation) {
        switch (orientation) {
          case "0/8":
            return (function(s) {
              return "M " + s / 2 + ", 0 l 0, " + s;
            })(size);
          case "vertical":
            return (function(s) {
              return "M " + s / 2 + ", 0 l 0, " + s;
            })(size);
          case "1/8":
            return (function(s) {
              return "M " + s / 4 + ",0 l " + s / 2 + "," + s + " M " + -s / 4 + ",0 l " + s / 2 + "," + s + " M " + s * 3 / 4 + ",0 l " + s / 2 + "," + s;
            })(size);
          case "2/8":
            return (function(s) {
              return "M 0," + s + " l " + s + "," + -s + " M " + -s / 4 + "," + s / 4 + " l " + s / 2 + "," + -s / 2 + " M " + 3 / 4 * s + "," + 5 / 4 * s + " l " + s / 2 + "," + -s / 2;
            })(size);
          case "diagonal":
            return (function(s) {
              return "M 0," + s + " l " + s + "," + -s + " M " + -s / 4 + "," + s / 4 + " l " + s / 2 + "," + -s / 2 + " M " + 3 / 4 * s + "," + 5 / 4 * s + " l " + s / 2 + "," + -s / 2;
            })(size);
          case "3/8":
            return (function(s) {
              return "M 0," + 3 / 4 * s + " l " + s + "," + -s / 2 + " M 0," + s / 4 + " l " + s + "," + -s / 2 + " M 0," + s * 5 / 4 + " l " + s + "," + -s / 2;
            })(size);
          case "4/8":
            return (function(s) {
              return "M 0," + s / 2 + " l " + s + ",0";
            })(size);
          case "horizontal":
            return (function(s) {
              return "M 0," + s / 2 + " l " + s + ",0";
            })(size);
          case "5/8":
            return (function(s) {
              return "M 0," + -s / 4 + " l " + s + "," + s / 2 + "M 0," + s / 4 + " l " + s + "," + s / 2 + "M 0," + s * 3 / 4 + " l " + s + "," + s / 2;
            })(size);
          case "6/8":
            return (function(s) {
              return "M 0,0 l " + s + "," + s + " M " + -s / 4 + "," + 3 / 4 * s + " l " + s / 2 + "," + s / 2 + " M " + s * 3 / 4 + "," + -s / 4 + " l " + s / 2 + "," + s / 2;
            })(size);
          case "7/8":
            return (function(s) {
              return "M " + -s / 4 + ",0 l " + s / 2 + "," + s + " M " + s / 4 + ",0 l " + s / 2 + "," + s + " M " + s * 3 / 4 + ",0 l " + s / 2 + "," + s;
            })(size);
          default:
            return (function(s) {
              return "M " + s / 2 + ", 0 l 0, " + s;
            })(size);
        }
      };
      lines = function() {
        var g, o, _i, _len, _results;
        g = this.append("defs").append("pattern").attr("id", id).attr("patternUnits", "userSpaceOnUse").attr("width", size).attr("height", size);
        if (background) {
          g.append("rect").attr("width", size).attr("height", size).attr("fill", background);
        }
        _results = [];
        for (_i = 0, _len = orientation.length; _i < _len; _i++) {
          o = orientation[_i];
          _results.push(g.append("path").attr("d", path(o)).attr("stroke-width", strokeWidth).attr("shape-rendering", shapeRendering).attr("stroke", stroke).attr("stroke-linecap", "square"));
        }
        return _results;
      };
      lines.background = function(_) {
        background = _;
        return lines;
      };
      lines.shapeRendering = function(_) {
        shapeRendering = _;
        return lines;
      };
      lines.thicker = function(_) {
        if (!arguments.length) {
          strokeWidth = strokeWidth * 2;
        } else {
          strokeWidth = strokeWidth * 2 * _;
        }
        return lines;
      };
      lines.thinner = function(_) {
        if (!arguments.length) {
          strokeWidth = strokeWidth / 2;
        } else {
          strokeWidth = strokeWidth / (2 * _);
        }
        return lines;
      };
      lines.farther = function(_) {
        if (!arguments.length) {
          size = size * 2;
        } else {
          size = size * 2 * _;
        }
        return lines;
      };
      lines.nearer = function(_) {
        if (!arguments.length) {
          size = size / 2;
        } else {
          size = size / (2 * _);
        }
        return lines;
      };
      lines.orientation = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        orientation = args;
        return lines;
      };
      lines.size = function(_) {
        size = _;
        return lines;
      };
      lines.stroke = function(_) {
        stroke = _;
        return lines;
      };
      lines.strokeWidth = function(_) {
        strokeWidth = _;
        return lines;
      };
      lines.id = function(_) {
        if (!arguments.length) {
          return id;
        } else {
          id = _;
          return lines;
        }
      };
      lines.url = function() {
        return "url(#" + lines.id() + ")";
      };
      return lines;
    }
  };

}).call(this);
